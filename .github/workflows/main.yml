on: push
jobs:
  insiders-build:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        include:
          - os: windows
            build: npx caxa --directory . --command "{{caxa}}/node_modules/.bin/node" "{{caxa}}/distribution/index.js" --output "obs-cli--windows--${{ github.sha }}.exe"
            artifact: obs-cli--windows--${{ github.sha }}.exe
          - os: macos
            build: |
              npx caxa --directory . --command "{{caxa}}/node_modules/.bin/node" "{{caxa}}/distribution/index.js" --output "obs-cli"
              tar -czf "obs-cli--macos--${{ github.sha }}.tgz" "obs-cli"
            artifact: obs-cli--macos--${{ github.sha }}.tgz
          - os: ubuntu
            build: |
              npx caxa --directory . --command "{{caxa}}/node_modules/.bin/node" "{{caxa}}/distribution/index.js" --output "obs-cli"
              tar -czf "obs-cli--linux--${{ github.sha }}.tgz" "obs-cli"
            artifact: obs-cli--linux--${{ github.sha }}.tgz
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 19
      - run: |
          npm ci
          ${{ matrix.build }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  test:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        node-version: [18, 19]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install-ci-test

  npm-publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 19
          registry-url: https://registry.npmjs.org/
      - run: npm ci && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [insiders-build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: obs-cli--windows--${{ github.sha }}.exe
      - uses: actions/download-artifact@v3
        with:
          name: obs-cli--macos--${{ github.sha }}.tgz
      - uses: actions/download-artifact@v3
        with:
          name: obs-cli--linux--${{ github.sha }}.tgz
      - run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
        id: tag
      - uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: obs-cli--windows--${{ github.sha }}.exe
          asset_name: obs-cli--windows--${{ steps.tag.outputs.tag }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: obs-cli--macos--${{ github.sha }}.tgz
          asset_name: obs-cli--macos--${{ steps.tag.outputs.tag }}.tgz
          asset_content_type: application/gzip
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: obs-cli--linux--${{ github.sha }}.tgz
          asset_name: obs-cli--linux--${{ steps.tag.outputs.tag }}.tgz
          asset_content_type: application/gzip
